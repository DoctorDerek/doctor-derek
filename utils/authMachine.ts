import { assign, createMachine } from "xstate"

/**
 *  Mock an authorization function without hitting an actual backend.
 **/
export const hashAuthToken = ({ user }: { user: string }) =>
  `VALID_AUTH_TOKEN_${user}`

/**
 *  Validate a putative authorization key without hitting an actual backend.
 **/
export const validateHashToken = ({
  user,
  token,
}: {
  user: string
  token: string
}) => token === hashAuthToken({ user })

export const LOCALSTORAGE_KEY_AUTH = "pokedex-context-key"

const authMachine = createMachine(
  {
    id: "auth",
    // TypeScript types are auto-generated by the XState VSCode extension:
    tsTypes: {} as import("./authMachine.typegen").Typegen0,
    schema: {
      // The context (extended state) of the machine:
      context: {} as { authorizedUser: string; authToken: string },
      // The events this machine handles:
      events: {} as
        | { type: "LOG_IN"; authorizedUser: string }
        | { type: "LOG_OUT" },
    },
    initial: "loggedOut",
    context: {
      authorizedUser: "",
      authToken: "",
    },
    states: {
      loggedOut: {
        on: {
          LOG_IN: {
            target: "loggedIn",
            // Run these actions on state transition via trigger LOG_IN:
            actions: ["updateUserInContext", "saveUserToLocalStorage"],
          },
        },
      },
      loggedIn: {
        on: {
          LOG_OUT: {
            target: "loggedOut",
            // Run these actions on state transition via trigger LOG_OUT:
            actions: ["clearUserFromContext", "clearUserFromLocalStorage"],
          },
        },
      },
    },
  },
  {
    actions: {
      // Implement actions to be able to save username in localStorage.
      // LOG_IN 1 -- We need to save the authorized user from event to context:
      updateUserInContext: assign({
        authorizedUser: (context, event) => event.authorizedUser,
        authToken: (context, event) =>
          hashAuthToken({ user: event.authorizedUser }),
      }),
      // LOG_IN 2 -- Once we've updated context, we can save it to localStorage:
      saveUserToLocalStorage: (context, event) =>
        localStorage.setItem(LOCALSTORAGE_KEY_AUTH, JSON.stringify(context)),
      // LOG_OUT 1 -- When we log out, we clear the state machine's context:
      clearUserFromContext: assign({
        authorizedUser: (context, event) => "",
        authToken: (context, event) => "",
      }),
      // LOG_OUT 2 -- Once we logged out, we delete our entry from localStorage:
      clearUserFromLocalStorage: (context, event) =>
        localStorage.removeItem(LOCALSTORAGE_KEY_AUTH),
    },
  }
)

export default authMachine
